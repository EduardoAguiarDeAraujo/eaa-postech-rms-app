name: CI Pipeline

on:
  push:
    branches: ["main", "develop", "feature/**", "bugfix/**"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL service to be healthy..."
          for i in $(seq 1 30); do
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' mysql)
            if [ "$HEALTH_STATUS" == "healthy" ]; then
              echo "MySQL is healthy!"
              break
            fi
            echo "MySQL health status: $HEALTH_STATUS. Waiting... ($i/30)"
            sleep 5 # Aumentado o tempo de espera para dar mais tempo ao MySQL
          done
          # Verifica o status final do MySQL e falha se não estiver saudável
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' mysql)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "MySQL did not become healthy in time. Exiting."
            exit 1
          fi

      - name: Build with Maven and Run Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_PROFILES_ACTIVE: test # Ativa o perfil 'test'
        run: mvn clean verify

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_PROFILES_ACTIVE: test
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=EduardoAguiarDeAraujo_eaa-postech-rms-app \
            -Dsonar.organization=eduardoaguiardearaujo \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=rms-clean-core/target/site/jacoco/jacoco.xml,rms-clean-infra/target/site/jacoco/jacoco.xml \
            -Dsonar.sources=rms-clean-core/src/main/java,rms-clean-infra/src/main/java \
            -Dsonar.tests=rms-clean-core/src/test/java,rms-clean-infra/src/test/java \
            -Dsonar.java.binaries=rms-clean-core/target/classes,rms-clean-infra/target/classes

      - name: Upload Test Results - Infra Module
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-infra
          path: rms-clean-infra/target/surefire-reports

      - name: Upload Test Results - Core Module
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-core
          path: rms-clean-core/target/surefire-reports
