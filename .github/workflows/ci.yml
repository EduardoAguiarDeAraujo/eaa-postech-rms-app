name: CI Pipeline

on:
  push:
    branches: ["main", "develop", "feature/**", "bugfix/**"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # Define serviços necessários para o job, como um banco de dados MySQL
    services:
      mysql:
        image: mysql:8.0 # Usar uma imagem oficial do MySQL
        env:
          MYSQL_ROOT_PASSWORD: rootpassword # Senha do usuário root do MySQL (para o contêiner)
          MYSQL_DATABASE: testdb # Nome do banco de dados para os testes
          MYSQL_USER: testuser # Usuário para a aplicação
          MYSQL_PASSWORD: testpassword # Senha do usuário para a aplicação
        ports:
          - 3306:3306 # Mapeia a porta 3306 do contêiner para a porta 3306 do host (opcional, mas boa prática para depuração)
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Fetch all history for SonarCloud analysis, especially for pull request decoration
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Install netcat-openbsd
        # Instala o netcat-openbsd, que é uma implementação concreta do netcat.
        run: sudo apt-get update && sudo apt-get install -y netcat-openbsd

      - name: Wait for MySQL to be ready
        # Espera até que a porta 3306 do serviço 'mysql' esteja aberta.
        # Isso garante que o banco de dados esteja pronto antes que os testes tentem se conectar.
        run: |
          echo "Waiting for MySQL service to be accessible..."
          sleep 10 # Adiciona um atraso inicial para garantir que o serviço esteja registrado na rede
          for i in $(seq 1 30); do
            # Tenta conectar à porta 3306 do serviço 'mysql' com um timeout de 1 segundo.
            if nc -z -w 1 mysql 3306; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 5 # Aumentado o tempo de espera entre as tentativas
          done
          # Verifica o status final do MySQL e falha se não estiver acessível
          if ! nc -z -w 1 mysql 3306; then
            echo "MySQL did not become ready in time. Exiting."
            exit 1
          fi

      - name: Build with Maven and Run Tests
        # Ativa o perfil 'test' do Spring Boot, que deve conter as configurações do banco de dados para o CI.
        # As variáveis de ambiente do serviço MySQL são passadas para o ambiente de execução do Maven.
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_PROFILES_ACTIVE: test # Ativa o perfil 'test'
        # The 'verify' phase includes running tests and often JaCoCo report generation
        run: mvn clean verify

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # As variáveis de ambiente do banco de dados também podem ser passadas para o SonarCloud Scan se necessário,
          # mas geralmente não são para a análise estática.
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_PROFILES_ACTIVE: test # Ativa o perfil 'test' também para o Sonar Scan
        run: |
          # Execute SonarCloud scan from the root directory.
          # SonarCloud automatically detects Maven multi-module projects.
          # We specify the paths to the JaCoCo XML reports for code coverage.
          # Ensure your pom.xml for each module is configured to generate jacoco.xml reports.
          mvn sonar:sonar \
            -Dsonar.projectKey=EduardoAguiarDeAraujo_eaa-postech-rms-app \
            -Dsonar.organization=eduardoaguiardearaujo \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=rms-clean-core/target/site/jacoco/jacoco.xml,rms-clean-infra/target/site/jacoco/jacoco.xml \
            -Dsonar.sources=rms-clean-core/src/main/java,rms-clean-infra/src/main/java \
            -Dsonar.tests=rms-clean-core/src/test/java,rms-clean-infra/src/test/java \
            -Dsonar.java.binaries=rms-clean-core/target/classes,rms-clean-infra/target/classes

      - name: Upload Test Results - Infra Module
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-infra
          path: rms-clean-infra/target/surefire-reports

      - name: Upload Test Results - Core Module
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-core
          path: rms-clean-core/target/surefire-reports
